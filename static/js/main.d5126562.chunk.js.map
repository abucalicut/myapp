{"version":3,"sources":["logo.svg","Component/Header.js","Component/Statedata.js","Component/India.js","Component/World.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","React","Component","Statedata","state","stateData","Axios","get","then","response","setState","data","allkeys","Object","keys","this","Accordion","map","itm","key","totalActive","totalConfirm","totalDeaths","totalRecover","districts","districtData","district_list","x","active","confirmed","deceased","recovered","ob","push","Card","as","Button","eventKey","Body","districtName","India","indiaStatus","resopnse","src","style","width","Title","Text","cases","todayCases","deaths","todayDeaths","World","worldData","height","countryInfo","flag","country","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,mLCuB5BC,E,uKAfP,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACnD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,YACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,UAA9B,SACA,kBAAC,IAAD,CAAMA,GAAG,SAASD,UAAU,YAA5B,gB,GAVHE,IAAMC,W,yCCqGZC,E,kDApGX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAW,IAHL,E,gEAOO,IAAD,OAChBC,IAAMC,IAAI,yDAAyDC,MAAK,SAAAC,GACpE,EAAKC,SAAS,CAAEL,UAAWI,EAASE,Y,+BAIlC,IAAD,OACDC,EAAUC,OAAOC,KAAKC,KAAKX,MAAMC,WAErC,OAEI,yBAAKN,UAAU,OACX,yBAAKA,UAAU,aAIX,kBAACiB,EAAA,EAAD,KAGQJ,EAAQK,KAAI,SAACC,EAAKC,GACd,IAAIC,EAAc,EACdC,EAAe,EACfC,EAAc,EACdC,EAAe,EAEfC,EAAY,EAAKpB,MAAMC,UAAUa,GAAKO,aACtCC,EAAgB,GACpB,IAAK,IAAIC,KAAKH,EAAW,CACrBJ,GAAeI,EAAUG,GAAGC,OAC5BP,GAAgBG,EAAUG,GAAGE,UAC7BP,GAAeE,EAAUG,GAAGG,SAC5BP,GAAgBC,EAAUG,GAAGI,UAC7B,IAAIC,EAAKR,EAAUG,GACnBK,EAAE,aAAmBL,EACrBD,EAAcO,KAAKD,GAERnB,OAAOC,KAAKU,GAC3B,OACI,kBAACU,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKhD,OAAN,KACI,kBAAC8B,EAAA,EAAUtB,OAAX,CAAkByC,GAAIC,IAAQ7C,QAAQ,UAAU8C,SAAUlB,GACrDD,EADL,IACU,0BAAMnB,UAAU,0BAAhB,iBAAwDqB,GAAmB,0BAAMrB,UAAU,0BAAhB,mBAA0DsB,GAAoB,0BAAMtB,UAAU,0BAAhB,mBAA0DwB,GAAoB,0BAAMxB,UAAU,0BAAhB,gBAAuDuB,KAG5S,kBAACN,EAAA,EAAUpB,SAAX,CAAoByC,SAAUlB,GAC1B,kBAACe,EAAA,EAAKI,KAAN,KAEI,2BAAOvC,UAAU,qCACb,+BACI,wCACA,sCACA,yCACA,uCACA,uCAEJ,+BAGQ2B,EAAcT,KAAI,SAACC,EAAKC,GACrB,OAAQ,4BACH,4BAAKD,EAAIqB,cACT,4BAAKrB,EAAIU,QACT,4BAAKV,EAAIW,WACT,4BAAKX,EAAIa,WACT,4BAAKb,EAAIY,6B,GAxErD7B,IAAMC,WCgFfsC,E,kDA/Ef,aAAc,IAAD,8BACT,gBACKpC,MAAM,CACPqC,YAAY,IAHP,E,gEAOO,IAAD,OACfnC,IAAMC,IAAI,gDAAgDC,MAAK,SAAAkC,GAC3D,EAAKhC,SAAS,CAAC+B,YAAYC,EAAS/B,Y,+BAKpC,OACI,6BACI,yBAAKZ,UAAU,aACX,yBAAK4C,IAAI,gDACT,sCAEJ,yBAAK5C,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAACmC,EAAA,EAAD,CAAMnC,UAAU,sBAAsB6C,MAAO,CAAEC,MAAO,UAClD,kBAACX,EAAA,EAAKI,KAAN,CAAWvC,UAAU,eACjB,kBAACmC,EAAA,EAAKY,MAAN,oBACA,kBAACZ,EAAA,EAAKa,KAAN,KACKhC,KAAKX,MAAMqC,YAAYO,OAHhC,kBAKejC,KAAKX,MAAMqC,YAAYQ,WALtC,OASR,yBAAKlD,UAAU,YACX,kBAACmC,EAAA,EAAD,CAAMnC,UAAU,sBAAsB6C,MAAO,CAAEC,MAAO,UAClD,kBAACX,EAAA,EAAKI,KAAN,CAAWvC,UAAU,eACjB,kBAACmC,EAAA,EAAKY,MAAN,qBACA,kBAACZ,EAAA,EAAKa,KAAN,KACChC,KAAKX,MAAMqC,YAAYb,QAH5B,kBAKeb,KAAKX,MAAMqC,YAAYb,OALtC,OASR,yBAAK7B,UAAU,YACX,kBAACmC,EAAA,EAAD,CAAMnC,UAAU,sBAAsB6C,MAAO,CAAEC,MAAO,UAClD,kBAACX,EAAA,EAAKI,KAAN,CAAWvC,UAAU,eACjB,kBAACmC,EAAA,EAAKY,MAAN,wBACA,kBAACZ,EAAA,EAAKa,KAAN,KACChC,KAAKX,MAAMqC,YAAYV,WAH5B,kBAKehB,KAAKX,MAAMqC,YAAYV,UALtC,OASR,yBAAKhC,UAAU,YACX,kBAACmC,EAAA,EAAD,CAAMnC,UAAU,qBAAqB6C,MAAO,CAAEC,MAAO,UACjD,kBAACX,EAAA,EAAKI,KAAN,CAAWvC,UAAU,eACjB,kBAACmC,EAAA,EAAKY,MAAN,eACA,kBAACZ,EAAA,EAAKa,KAAN,KACChC,KAAKX,MAAMqC,YAAYS,QAH5B,kBAKenC,KAAKX,MAAMqC,YAAYU,YALtC,SAYhB,yBAAKpD,UAAU,aACf,kBAAC,EAAD,Y,GAvEIE,IAAMC,WCsDXkD,E,kDAtDX,aAAe,IAAD,8BACV,gBACKhD,MAAQ,CACTiD,UAAW,IAHL,E,gEAOO,IAAD,OAChB/C,IAAMC,IAAI,0CAA0CC,MAAK,SAAAC,GAErD,EAAKC,SAAS,CAAE2C,UAAW5C,EAASE,Y,+BAKxC,OACI,6BACI,2BAAOZ,UAAU,kDACb,+BACI,4BACI,6BACA,uCACA,4CACA,+CACA,+CACA,+CAGR,+BAEQgB,KAAKX,MAAMiD,UAAUpC,KAAI,SAACC,EAAKC,GAC3B,OACI,4BACI,4BAAI,yBAAKyB,MAAO,CAACU,OAAO,OAAOT,MAAM,QAASF,IAAKzB,EAAIqC,YAAYC,QACnE,4BAAKtC,EAAIuC,QAAT,KACA,4BAAKvC,EAAIU,QACT,4BAAKV,EAAI8B,OACT,4BAAK9B,EAAIa,WACT,4BAAKb,EAAIgC,mB,GAvC7BjD,IAAMC,W,OC2BXwD,MAtBf,WACE,OACE,6BAEE,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,WCXQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5126562.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">Covid-19</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link className=\"nav-link\" to=\"/india\">India</Link>\r\n                        <Link to=\"/world\" className=\"nav-link\">World</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Axios from 'axios';\r\nimport { Card, Accordion, Button } from 'react-bootstrap';\r\n\r\nclass Statedata extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            stateData: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response => {\r\n            this.setState({ stateData: response.data })\r\n\r\n        })\r\n    }\r\n    render() {\r\n        let allkeys = Object.keys(this.state.stateData);\r\n\r\n        return (\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n\r\n\r\n\r\n                    <Accordion>\r\n                        {\r\n\r\n                            allkeys.map((itm, key) => {\r\n                                let totalActive = 0;\r\n                                let totalConfirm = 0;\r\n                                let totalDeaths = 0;\r\n                                let totalRecover = 0;\r\n\r\n                                let districts = this.state.stateData[itm].districtData;\r\n                                let district_list = [];\r\n                                for (let x in districts) {\r\n                                    totalActive += districts[x].active;\r\n                                    totalConfirm += districts[x].confirmed;\r\n                                    totalDeaths += districts[x].deceased;\r\n                                    totalRecover += districts[x].recovered;\r\n                                    let ob = districts[x];\r\n                                    ob[\"districtName\"] = x;\r\n                                    district_list.push(ob);\r\n                                }\r\n                                let distKeys = Object.keys(districts);\r\n                                return (\r\n                                    <Card>\r\n                                        <Card.Header>\r\n                                            <Accordion.Toggle as={Button} variant=\"primary\" eventKey={key}>\r\n                                                {itm} <span className=\"btn btn-dark pr-1 mr-1\"> Total Active:{totalActive}</span><span className=\"btn btn-dark pr-1 mr-1\">Total Confirmed:{totalConfirm}</span><span className=\"btn btn-dark pr-1 mr-1\">Total Recovered:{totalRecover}</span><span className=\"btn btn-dark pr-1 mr-1\">Total Deaths:{totalDeaths}</span>\r\n                                            </Accordion.Toggle>\r\n                                        </Card.Header>\r\n                                        <Accordion.Collapse eventKey={key}>\r\n                                            <Card.Body>\r\n\r\n                                                <table className=\"table table-bodered table-striped\">\r\n                                                    <thead>\r\n                                                        <th>District</th>\r\n                                                        <th>Active</th>\r\n                                                        <th>Confirmed</th>\r\n                                                        <th>Recover</th>\r\n                                                        <th>Deaths</th>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n\r\n                                                            district_list.map((itm, key) => {\r\n                                                               return( <tr>\r\n                                                                    <td>{itm.districtName}</td>\r\n                                                                    <td>{itm.active}</td>\r\n                                                                    <td>{itm.confirmed}</td>\r\n                                                                    <td>{itm.recovered}</td>\r\n                                                                    <td>{itm.deceased}</td>\r\n                                                                </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n\r\n                                                    </tbody>\r\n                                                </table>\r\n\r\n\r\n                                            </Card.Body>\r\n                                        </Accordion.Collapse>\r\n                                    </Card>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n\r\n                    </Accordion>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Statedata;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Card } from 'react-bootstrap';\r\nimport Statedata from './Statedata';\r\nimport Axios from 'axios';\r\nclass India extends React.Component {\r\nconstructor(){\r\n    super();\r\n    this.state={\r\n        indiaStatus:[]\r\n    }\r\n}\r\n\r\ncomponentDidMount(){\r\n    Axios.get(\"https://corona.lmao.ninja/v2/countries/india\").then(resopnse=>{\r\n        this.setState({indiaStatus:resopnse.data})\r\n    });\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"col-md-12\" >\r\n                    <img src=\"https://www.countryflags.io/in/shiny/64.png\" />\r\n                    <h3>INDIA</h3>\r\n                </div>\r\n                <div className=\"col-md-12\" >\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\" >\r\n                            <Card className=\"badge badge-primary\" style={{ width: '18rem' }}>\r\n                                <Card.Body className=\"text-center\">\r\n                                    <Card.Title>TOTAL CASES</Card.Title>\r\n                                    <Card.Text>\r\n                                        {this.state.indiaStatus.cases}\r\n</Card.Text>\r\n                               [Today Cases : {this.state.indiaStatus.todayCases}]\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\" >\r\n                            <Card className=\"badge badge-warning\" style={{ width: '18rem' }}>\r\n                                <Card.Body className=\"text-center\">\r\n                                    <Card.Title>ACTIVE CASES</Card.Title>\r\n                                    <Card.Text>\r\n                                    {this.state.indiaStatus.active}\r\n</Card.Text>\r\n                               [Today Cases : {this.state.indiaStatus.active}]\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\" >\r\n                            <Card className=\"badge badge-success\" style={{ width: '18rem' }}>\r\n                                <Card.Body className=\"text-center\">\r\n                                    <Card.Title>RECOVERED CASES</Card.Title>\r\n                                    <Card.Text>\r\n                                    {this.state.indiaStatus.recovered}\r\n</Card.Text>\r\n                               [Today Cases : {this.state.indiaStatus.recovered}]\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\" >\r\n                            <Card className=\"badge badge-danger\" style={{ width: '18rem' }}>\r\n                                <Card.Body className=\"text-center\">\r\n                                    <Card.Title>DEATHS</Card.Title>\r\n                                    <Card.Text>\r\n                                    {this.state.indiaStatus.deaths}\r\n</Card.Text>\r\n                               [Today Cases : {this.state.indiaStatus.todayDeaths}]\r\n                            </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-12\">\r\n                <Statedata />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default India;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Axios from 'axios';\r\n\r\nclass World extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            worldData: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get(\"https://corona.lmao.ninja/v2/countries\").then(response => {\r\n\r\n            this.setState({ worldData: response.data })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table className=\"table table-prmary table-bodered table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Country</th>\r\n                            <th>Total Active</th>\r\n                            <th>Total Confirmed</th>\r\n                            <th>Total Recovered</th>\r\n                            <th>Tortal Deaths</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                            this.state.worldData.map((itm, key) => {\r\n                                return (\r\n                                    <tr>\r\n                                        <td><img style={{height:\"40px\",width:\"40px\"}} src={itm.countryInfo.flag}></img></td>\r\n                                        <td>{itm.country} </td>\r\n                                        <td>{itm.active}</td>\r\n                                        <td>{itm.cases}</td>\r\n                                        <td>{itm.recovered}</td>\r\n                                        <td>{itm.deaths}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                        \r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default World;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\nimport Header from './Component/Header';\nimport India from './Component/India';\nimport World from './Component/World';\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\nfunction App() {\n  return (\n    <div>\n     \n      <Router>\n      <Header/>\n        <Switch>\n          <Route exact path='/'>\n            <India />\n          </Route>\n          <Route path='/india'>\n            <India />\n          </Route>\n          <Route path='/world'>\n            <World />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}